#lang racket
"1"
(define (sum f n)
  (if (= n 1)
      (f 1)
      (+ (f n) (sum f (- n 1)))
      )
  )
(define (zeno n)
  (/ 1 (expt 2 n)))
(sum zeno 1)
(sum zeno 9)

"2a"
(define (g-sum f i n) ;f= function, i=starting index of summation (generally 0 or 1), n=ending index
  (if (= i n)
      (f 1)
      (+ (f n) (g-sum f i (- n 1)))
      ))
"2b"
(define (geometric n)
  (/ 1 (expt 2 n)))
(g-sum zeno 1 9)
(g-sum geometric 0 9)

"3a"
(define (find sequence test n)
  (define (find-h i found)
    (let* (i) ())
    (if (= #t)
        (if (= n (+ found 1))
            ith
            (found-h (+ i 1) (+ found 1))
           fi)
        (found-h (+ i 1) found)))
  (find-h 1 0)
(define  (is-even? n) (= (modulo n 2) 0))
  (define (is-odd? n) (not (= (modulo n 2) 0)))


                   